<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToDoApi</name>
    </assembly>
    <members>
        <member name="M:ToDoApi.Controllers.AccountController.Login(ToDoApi.Models.Account)">
            <summary>
            Get a Json Web Token(JWT)
            </summary>
            <param name="accountInput"> only accountid and password is required </param>
            <returns></returns>
            <response code="200">jwt encoded</response>
            <response code="401">login fail</response>        
            <response code="404">account is not exist</response>        
        </member>
        <member name="M:ToDoApi.Controllers.AccountController.Register(ToDoApi.Models.Account)">
            <summary>
            Register an account
            </summary>
            <param name="account">required all except events</param>
            <returns></returns>
            <response code="201">account created</response>
            <response code="400">can't register account with provided information</response>  
        </member>
        <member name="M:ToDoApi.Controllers.AccountController.Update(ToDoApi.Models.Account)">
            <summary>
            Update account infor
            </summary>
            <param name="account"></param>
            <returns></returns>
            <response code="200">account was updated</response>
            <response code="400">can't update account</response>        
            <response code="404">account is not exist</response>        
        </member>
        <member name="M:ToDoApi.Controllers.EventController.Add(ToDoApi.Models.Event)">
            <summary>
            Add an event
            </summary>
            <param name="eventInput"></param>
            <returns></returns>
            <response code="201">event was added</response>
            <response code="400">exception, can't add event</response>  
        </member>
        <member name="M:ToDoApi.Controllers.EventController.GetById(System.String)">
            <summary>
            Get an event by id
            </summary>
            <param name="id">event id</param>
            <returns></returns>
            <response code="200">an event</response>
            <response code="400">exception, can't get event</response>  
            <response code="404">not found event</response>  
        </member>
        <member name="M:ToDoApi.Controllers.EventController.GetAll">
            <summary>
            Get all event of account
            </summary>
            <returns></returns>
            <response code="200">all event of account</response>
            <response code="400">exception, can't get event</response>  
        </member>
        <member name="M:ToDoApi.Controllers.EventController.Update(ToDoApi.Models.Event)">
            <summary>
            Update an event
            </summary>
            <param name="eventInput"></param>
            <returns></returns>
            <response code="200">event was updated</response>
            <response code="400">exception, can't update event</response>  
            <response code="404">not found event</response>  
        </member>
        <member name="M:ToDoApi.Controllers.EventController.Delete(System.String)">
            <summary>
            Delete an event
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">event was deleted</response>
            <response code="400">exception, can't update event</response>  
            <response code="404">not found event</response>  
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.Issuer">
            <summary>
            "iss" (Issuer) Claim
            </summary>
            <remarks>The "iss" (issuer) claim identifies the principal that issued the
              JWT.  The processing of this claim is generally application specific.
              The "iss" value is a case-sensitive string containing a StringOrURI
              value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.Subject">
            <summary>
            "sub" (Subject) Claim
            </summary>
            <remarks> The "sub" (subject) claim identifies the principal that is the
              subject of the JWT.  The claims in a JWT are normally statements
              about the subject.  The subject value MUST either be scoped to be
              locally unique in the context of the issuer or be globally unique.
              The processing of this claim is generally application specific.  The
              "sub" value is a case-sensitive string containing a StringOrURI
              value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.Audience">
            <summary>
            "aud" (Audience) Claim
            </summary>
            <remarks>The "aud" (audience) claim identifies the recipients that the JWT is
              intended for.  Each principal intended to process the JWT MUST
              identify itself with a value in the audience claim.  If the principal
              processing the claim does not identify itself with a value in the
              "aud" claim when this claim is present, then the JWT MUST be
              rejected.  In the general case, the "aud" value is an array of case-
              sensitive strings, each containing a StringOrURI value.  In the
              special case when the JWT has one audience, the "aud" value MAY be a
              single case-sensitive string containing a StringOrURI value.  The
              interpretation of audience values is generally application specific.
              Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.NotBefore">
            <summary>
            "nbf" (Not Before) Claim (default is UTC NOW)
            </summary>
            <remarks>The "nbf" (not before) claim identifies the time before which the JWT
              MUST NOT be accepted for processing.  The processing of the "nbf"
              claim requires that the current date/time MUST be after or equal to
              the not-before date/time listed in the "nbf" claim.  Implementers MAY
              provide for some small leeway, usually no more than a few minutes, to
              account for clock skew.  Its value MUST be a number containing a
              NumericDate value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.IssuedAt">
            <summary>
            "iat" (Issued At) Claim (default is UTC NOW)
            </summary>
            <remarks>The "iat" (issued at) claim identifies the time at which the JWT was
              issued.  This claim can be used to determine the age of the JWT.  Its
              value MUST be a number containing a NumericDate value.  Use of this
              claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.ValidFor">
            <summary>
            Set the timespan the token will be valid for (default is 5 min/300 seconds)
            </summary>
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.Expiration">
            <summary>
            "exp" (Expiration Time) Claim (returns IssuedAt + ValidFor)
            </summary>
            <remarks>The "exp" (expiration time) claim identifies the expiration time on
              or after which the JWT MUST NOT be accepted for processing.  The
              processing of the "exp" claim requires that the current date/time
              MUST be before the expiration date/time listed in the "exp" claim.
              Implementers MAY provide for some small leeway, usually no more than
              a few minutes, to account for clock skew.  Its value MUST be a number
              containing a NumericDate value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.JtiGenerator">
            <summary>
            "jti" (JWT ID) Claim (default ID is a GUID)
            </summary>
            <remarks>The "jti" (JWT ID) claim provides a unique identifier for the JWT.
              The identifier value MUST be assigned in a manner that ensures that
              there is a negligible probability that the same value will be
              accidentally assigned to a different data object; if the application
              uses multiple issuers, collisions MUST be prevented among values
              produced by different issuers as well.  The "jti" claim can be used
              to prevent the JWT from being replayed.  The "jti" value is a case-
              sensitive string.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:ToDoApi.Options.JwtIssuerOptions.SigningCredentials">
            <summary>
            The signing key to use when generating tokens.
            </summary>
        </member>
    </members>
</doc>
